{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "code",
      "execution_count": 4,
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "UmX6jOWXbss6",
        "outputId": "3c2990e3-5719-4c63-e25b-b19b112280e7"
      },
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "\n",
            "Library Management Menu:\n",
            "1. View All Books\n",
            "2. Add a Book\n",
            "3. Remove a Book\n",
            "4. Update a Book\n",
            "5. Borrow a Book\n",
            "6. Return a Book\n",
            "7. Search for a Book\n",
            "8. View Statistics and Visualizations\n",
            "9. Export Search Results\n",
            "10. Exit\n",
            "Enter your choice (1-10): 4\n",
            "Enter the book ID to update (e.g., BK-001): BK-001\n",
            "Enter new availability (Yes/No, leave blank to skip): no\n",
            "Enter new borrower name (leave blank to skip): oishi\n",
            "Enter new borrow duration in days (leave blank to skip): 10\n",
            "Changes saved to updated_library_inventory.csv.\n",
            "Book with ID BK-001 updated successfully.\n",
            "\n",
            "Library Management Menu:\n",
            "1. View All Books\n",
            "2. Add a Book\n",
            "3. Remove a Book\n",
            "4. Update a Book\n",
            "5. Borrow a Book\n",
            "6. Return a Book\n",
            "7. Search for a Book\n",
            "8. View Statistics and Visualizations\n",
            "9. Export Search Results\n",
            "10. Exit\n",
            "Enter your choice (1-10): 10\n",
            "Exiting... Goodbye!\n"
          ]
        }
      ],
      "source": [
        "import pandas as pd\n",
        "import numpy as np\n",
        "from tabulate import tabulate\n",
        "import re\n",
        "import matplotlib.pyplot as plt\n",
        "\n",
        "try:\n",
        " library_df = pd.read_csv(\"library_inventory.csv\")\n",
        "except FileNotFoundError:\n",
        " data = {\n",
        " \"Book ID\": [\"BK-001\", \"BK-002\", \"BK-003\"],\n",
        " \"Title\": [\"1984\", \"To Kill a Mockingbird\", \"The Great Gatsby\"],\n",
        " \"Author\": [\"George Orwell\", \"Harper Lee\", \"F. Scott Fitzgerald\"],\n",
        " \"Genre\": [\"Dystopian\", \"Fiction\", \"Classic\"],\n",
        " \"Availability\": [\"Yes\", \"Yes\", \"No\"],\n",
        " \"Borrower\": [None, None, \"John Doe\"],\n",
        " \"Borrow Duration (days)\": [0, 0, 15]\n",
        " }\n",
        " library_df = pd.DataFrame(data)\n",
        " library_df.to_csv(\"library_inventory.csv\", index=False)\n",
        "\n",
        "def save_changes():\n",
        " library_df.to_csv(\"updated_library_inventory.csv\", index=False)\n",
        " print(\"Changes saved to updated_library_inventory.csv.\")\n",
        "\n",
        "def export_data(filtered_df, filename):\n",
        " filtered_df.to_csv(filename, index=False)\n",
        " print(f\"Data exported to {filename}.\")\n",
        "\n",
        "def display_library():\n",
        " print(\"Library Data:\")\n",
        " print(tabulate(library_df, headers='keys', tablefmt='grid', showindex=False))\n",
        "\n",
        "def is_valid_book_id(book_id):\n",
        " \"\"\"Check if the Book ID follows the format 'BK-XXX' where X is a digit.\"\"\"\n",
        " return bool(re.match(r\"^BK-\\d{3}$\", book_id))\n",
        "\n",
        "def add_book(book_id, title, author, genre, availability, borrower=None, borrow_duration=0):\n",
        " global library_df\n",
        " if not is_valid_book_id(book_id):\n",
        " print(\"Invalid book ID format. Please use 'BK-001', 'BK-002', etc.\")\n",
        " return\n",
        " new_book = {\n",
        " \"Book ID\": book_id,\n",
        " \"Title\": title,\n",
        " \"Author\": author,\n",
        " \"Genre\": genre,\n",
        " \"Availability\": availability,\n",
        " \"Borrower\": borrower,\n",
        " \"Borrow Duration (days)\": borrow_duration\n",
        " }\n",
        " library_df = pd.concat([library_df, pd.DataFrame([new_book])], ignore_index=True)\n",
        " save_changes()\n",
        " print(f\"Book '{title}' added successfully.\")\n",
        "\n",
        "def remove_book(book_id):\n",
        " global library_df\n",
        " if not is_valid_book_id(book_id):\n",
        " print(\"Invalid book ID format. Please use 'BK-001', 'BK-002', etc.\")\n",
        " return\n",
        " if book_id in library_df[\"Book ID\"].values:\n",
        " library_df = library_df[library_df[\"Book ID\"] != book_id]\n",
        " save_changes()\n",
        " print(f\"Book with ID {book_id} removed successfully.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} not found.\")\n",
        "\n",
        "def update_book(book_id, availability=None, borrower=None, borrow_duration=None):\n",
        " global library_df\n",
        " if not is_valid_book_id(book_id):\n",
        " print(\"Invalid book ID format. Please use 'BK-001', 'BK-002', etc.\")\n",
        " return\n",
        " if book_id in library_df[\"Book ID\"].values:\n",
        " if availability:\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Availability\"] = availability\n",
        " if borrower:\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrower\"] = borrower\n",
        " if borrow_duration is not None:\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrow Duration (days)\"] = borrow_duration\n",
        " save_changes()\n",
        " print(f\"Book with ID {book_id} updated successfully.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} not found.\")\n",
        "\n",
        "def borrow_book(book_id, borrower_name, borrow_duration):\n",
        " global library_df\n",
        " if not is_valid_book_id(book_id):\n",
        " print(\"Invalid book ID format. Please use 'BK-001', 'BK-002', etc.\")\n",
        " return\n",
        " if book_id in library_df[\"Book ID\"].values:\n",
        " book = library_df[library_df[\"Book ID\"] == book_id]\n",
        " if book[\"Availability\"].values[0] == \"Yes\":\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Availability\"] = \"No\"\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrower\"] = borrower_name\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrow Duration (days)\"] = borrow_duration\n",
        " save_changes()\n",
        " print(f\"Book with ID {book_id} has been borrowed by {borrower_name}.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} is currently unavailable.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} not found.\")\n",
        "\n",
        "def return_book(book_id):\n",
        " global library_df\n",
        " if not is_valid_book_id(book_id):\n",
        " print(\"Invalid book ID format. Please use 'BK-001', 'BK-002', etc.\")\n",
        " return\n",
        " if book_id in library_df[\"Book ID\"].values:\n",
        " book = library_df[library_df[\"Book ID\"] == book_id]\n",
        " if book[\"Borrower\"].values[0] is not None:\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Availability\"] = \"Yes\"\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrower\"] = None\n",
        " library_df.loc[library_df[\"Book ID\"] == book_id, \"Borrow Duration (days)\"] = 0\n",
        " save_changes()\n",
        " print(f\"Book with ID {book_id} has been returned.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} was not borrowed.\")\n",
        " else:\n",
        " print(f\"Book with ID {book_id} not found.\")\n",
        "\n",
        "def generate_data_visualization():\n",
        " global library_df\n",
        " genre_counts = library_df[\"Genre\"].value_counts()\n",
        " genre_counts.plot(kind='bar', title='Number of Books in Each Genre', color='skyblue')\n",
        " plt.xlabel('Genre')\n",
        " plt.ylabel('Number of Books')\n",
        " plt.xticks(rotation=45)\n",
        " plt.tight_layout()\n",
        " plt.show()\n",
        "\n",
        " availability_counts = library_df[\"Availability\"].value_counts()\n",
        " availability_counts.plot(kind='pie', title='Availability Status of Books', autopct='%1.1f%%', colors=['#66b3ff', '#ff9999'])\n",
        " plt.ylabel('')\n",
        " plt.tight_layout()\n",
        " plt.show()\n",
        "\n",
        "def analyze_library():\n",
        " global library_df\n",
        " total_books = len(library_df)\n",
        " most_borrowed_genre = library_df[library_df[\"Availability\"] == \"No\"][\"Genre\"].mode().iloc[0] if not library_df[library_df[\"Availability\"] == \"No\"].empty else \"None\"\n",
        " average_borrow_duration = np.mean(library_df[library_df[\"Availability\"] == \"No\"][\"Borrow Duration (days)\"])\n",
        "\n",
        " print(\"Library Analysis:\")\n",
        " print(f\"Total number of books: {total_books}\")\n",
        " print(f\"Most borrowed genre: {most_borrowed_genre}\")\n",
        " print(f\"Average borrowing duration: {average_borrow_duration:.2f} days\")\n",
        " return most_borrowed_genre\n",
        "\n",
        "def search_books(query, column):\n",
        " global library_df\n",
        " filtered_books = library_df[library_df[column].str.contains(query, case=False, na=False)]\n",
        " print(f\"Search Results for {query} in {column.capitalize()}:\")\n",
        " print(tabulate(filtered_books, headers='keys', tablefmt='grid', showindex=False))\n",
        " return filtered_books\n",
        "\n",
        "\n",
        "while True:\n",
        " print(\"\\nLibrary Management Menu:\")\n",
        " print(\"1. View All Books\")\n",
        " print(\"2. Add a Book\")\n",
        " print(\"3. Remove a Book\")\n",
        " print(\"4. Update a Book\")\n",
        " print(\"5. Borrow a Book\")\n",
        " print(\"6. Return a Book\")\n",
        " print(\"7. Search for a Book\")\n",
        " print(\"8. View Statistics and Visualizations\")\n",
        " print(\"9. Export Search Results\")\n",
        " print(\"10. Exit\")\n",
        "\n",
        " choice = input(\"Enter your choice (1-10): \")\n",
        "\n",
        " if choice == \"1\":\n",
        " display_library()\n",
        " elif choice == \"2\":\n",
        " book_id = input(\"Enter the book ID (e.g., BK-001): \")\n",
        " title = input(\"Enter the book title: \")\n",
        " author = input(\"Enter the author: \")\n",
        " genre = input(\"Enter the genre: \")\n",
        " availability = input(\"Enter availability (Yes/No): \")\n",
        " borrower = input(\"Enter borrower name (if borrowed, else press Enter): \") or None\n",
        " borrow_duration = int(input(\"Enter borrow duration in days (if borrowed, else enter 0): \"))\n",
        " add_book(book_id, title, author, genre, availability, borrower, borrow_duration)\n",
        " elif choice == \"3\":\n",
        " book_id = input(\"Enter the book ID to remove (e.g., BK-001): \")\n",
        " remove_book(book_id)\n",
        " elif choice == \"4\":\n",
        " book_id = input(\"Enter the book ID to update (e.g., BK-001): \")\n",
        " availability = input(\"Enter new availability (Yes/No, leave blank to skip): \") or None\n",
        " borrower = input(\"Enter new borrower name (leave blank to skip): \") or None\n",
        " borrow_duration = input(\"Enter new borrow duration in days (leave blank to skip): \")\n",
        " borrow_duration = int(borrow_duration) if borrow_duration else None\n",
        " update_book(book_id, availability, borrower, borrow_duration)\n",
        " elif choice == \"5\":\n",
        " book_id = input(\"Enter the book ID to borrow (e.g., BK-001): \")\n",
        " borrower_name = input(\"Enter borrower's name: \")\n",
        " borrow_duration = int(input(\"Enter borrow duration in days: \"))\n",
        " borrow_book(book_id, borrower_name, borrow_duration)\n",
        " elif choice == \"6\":\n",
        " book_id = input(\"Enter the book ID to return (e.g., BK-001): \")\n",
        " return_book(book_id)\n",
        " elif choice == \"7\":\n",
        " print(\"Search Options:\")\n",
        " print(\"1. Search by Title\")\n",
        " print(\"2. Search by Author\")\n",
        " print(\"3. Search by Genre\")\n",
        " sub_choice = input(\"Choose an option (1-3): \")\n",
        " if sub_choice == \"1\":\n",
        " query = input(\"Enter the title to search: \")\n",
        " filtered = search_books(query, \"Title\")\n",
        " elif sub_choice == \"2\":\n",
        " query = input(\"Enter the author to search: \")\n",
        " filtered = search_books(query, \"Author\")\n",
        " elif sub_choice == \"3\":\n",
        " query = input(\"Enter the genre to search: \")\n",
        " filtered = search_books(query, \"Genre\")\n",
        " else:\n",
        " print(\"Invalid choice.\")\n",
        " elif choice == \"8\":\n",
        " print(\"Statistics and Visualizations:\")\n",
        " most_borrowed_genre = analyze_library()\n",
        " view_genre = input(\"Do you want to view the most borrowed genre? (Yes/No): \").strip().lower()\n",
        " if view_genre == \"yes\":\n",
        " print(f\"The most borrowed genre is: {most_borrowed_genre}\")\n",
        " generate_data_visualization()\n",
        " elif choice == \"9\":\n",
        " if 'filtered' in locals() and not filtered.empty:\n",
        " filename = input(\"Enter the filename to export (e.g., search_results.csv): \")\n",
        " export_data(filtered, filename)\n",
        " else:\n",
        " print(\"No search results available to export.\")\n",
        " elif choice == \"10\":\n",
        " print(\"Exiting... Goodbye!\")\n",
        " break\n",
        " else:\n",
        " print(\"Invalid choice. Please try again.\")\n"
      ]
    }
  ]
}
